<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Application context containing http authentication control
  -->

<b:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:b="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">

    <!-- intercept-url hints
         role names in the access attribute must have "ROLE_" prefixes. What occurs 
         the underscore is up to you.
     -->
    <!-- Security space reserved by the OpenEdge REST Manager to signal 
         the application to update its state.  This URL space will always 
         use a built-in account in a separate authentication provider. 
         NB: Define Role names in the <intercept-url> as UPPERCASE because 
         Spring Security LDAP bean will always UPPERCASE the role name
         it obtains from the LDAP directory service. 	
         ALTER THIS SECTION TO MEET YOUR PRODUCTION DEPLOYMNET REQUIREMENTS		 
         DO  NOT ALTER THIS HTTP SECURITY CONFIGURATION  
     -->
    <http pattern="/adapterman"
        auto-config="false" 
        use-expressions="true" 
        create-session="never" 
        disable-url-rewriting="true" 
        authentication-manager-ref="RestManagerAuth"
        realm="REST Manager Port" >

        <!-- Entry point for the REST Manager to cause a state update -->
        <intercept-url pattern="/adapterman" 
                    access="hasAnyRole('ROLE_PSCADAPTER')"/> 

        <http-basic />
        <anonymous enabled="false" />

        <!-- login session controls 
             note: comment out if session-creation is stateless -->
        <!--session-management session-fixation-protection="none" /-->

        <access-denied-handler error-page="/static/error/error401.html" />

    </http>

    <!-- This HTTP security space represents the REST service and controls 
         the authentication/authorization process to its dynamic/static content.  
         ALTER THIS SECTION TO MEET YOUR PRODUCTION DEPLOYMENT REQUIREMENTS
     -->
    <http auto-config="false" 
        use-expressions="true" 
        create-session="stateless" 
        disable-url-rewriting="true" 
        authentication-manager-ref="RestApplicationtAuth"
        realm="REST Application" >
         
        <!-- OpenEdge PRE AUTH Filter  -->
        <custom-filter position="PRE_AUTH_FILTER" 
                      ref="OEPreauthfilter" />

        <!-- OpenEdge ClientPrincipal SSO Filter -->
        <custom-filter after="SESSION_MANAGEMENT_FILTER" 
                       ref="OEClientPrincipalFilter" />

        <!-- OpenEdge CORS Filter -->
        <custom-filter before="SECURITY_CONTEXT_FILTER" 
                       ref="OECORSFilter" />

        <!-- URL access controls -->

        <!-- HTTP REST Mapping Debug Information for Deployed Services -->
        <intercept-url pattern="/rest" 
                    access="hasAnyRole('ROLE_PSCDEBUG')"/>
        <intercept-url pattern="/rest/" 
                    access="hasAnyRole('ROLE_PSCDEBUG')"/>

        <!-- HTTP REST/Mobile AppServer service -->
        <intercept-url pattern="/rest/**" 
                    access="hasAnyRole('ROLE_PSCUSER')"/>

        <!-- Restricted Mobile session class uses this page as part of its 
             login() operation, protect it so it triggers user 
             authentication -->
        <intercept-url pattern="/static/home.html" 
                    access="hasAnyRole('ROLE_PSCUSER')"/>

		<intercept-url pattern="/static/*.json"
				access="hasAnyRole('ROLE_PSCUSER')"/>

        <!-- Public shared HTTP REST/Mobile static files -->
        <intercept-url pattern="/*" method="GET" 
                    access="permitAll()"/>

        <intercept-url pattern="/static/error/*" method="GET"
                    access="permitAll()"/>

        <intercept-url pattern="/static/auth/*" 
                    access="permitAll()" />

        <!-- Best practice - deny anything not explicitly granted. -->
        <intercept-url pattern="/**" access="denyAll()"/>

        <!-- authentication models -->
        <http-basic />

        <!-- logout is not normally part of basic authentication, but is
              used by OpenEdge Mobile to end any sessions that may have
              been created -->
        <logout logout-url="/static/auth/j_spring_security_logout" 
           success-handler-ref="OELogoutSuccessHandler"
           invalidate-session="true" 
           delete-cookies="JSESSIONID" />

        <!-- login session controls 
             note: comment out if session-creation is stateless -->
        <!--session-management session-fixation-protection="none" /-->

        <access-denied-handler error-page="/static/error/error401.html" />
    </http>

    <!-- The Pre-auth security filter for  SSO  -->
    <b:bean id="OEPreauthfilter" class="com.progress.rest.security.OERequestHeaderAuthenticationFilter">
          <!-- USER-EDIT: To turn on SSO :
               1. Set "enabled" property to true 
               2. For single-domain supply the Domain Access Code as the value for "key" property 
               3. For multi-domain supply the absolute path of a 'registryFile' generated using OpenEdge's  
                  $DLC/bin/gendomreg.bat utility as "registryFile" property -->
           <b:property name="enabled" value="false"/> 
           <b:property name="key" value=""/>     
           <!--<b:property name="registryFile" value= "" /> -->
           <b:property name="encoding" value="OECP"/> 
           <b:property name="headername" value="X-OE-CLIENT-CONTEXT-ID"/>  
           <b:property name="authenticationManager" ref="authenticationManager" />
    </b:bean>
    
    <authentication-manager alias="authenticationManager">
        <authentication-provider ref="preauthAuthProvider" />
    </authentication-manager>
    
    <b:bean id="preauthAuthProvider" class="com.progress.rest.security.OEPreAuthenticatedAuthenticationProvider">  
            <!--  
            <b:property name="rolePrefix" value="ROLE_" />
            <b:property name="enabledAttrName" value="ATTR_ENABLED" />
            <b:property name="lockedAttrName" value="ATTR_LOCKED" />
            <b:property name="expiredAttrName" value="ATTR_EXPIRED" /> 
            -->
    </b:bean>

    <!-- The security filter that turns a Spring token into an OpenEdge
         ClientPrincipal object -->
    <b:bean id="OEClientPrincipalFilter"
             class="com.progress.rest.security.OEClientPrincipalFilter" >
             <!--
             <b:property name="enablecp" value="false" />
             <b:property name="domain" value="sample" />
             <b:property name="roles" value="sample" />
             <b:property name="authz" value="false" />
             <b:property name="expires" value="600" />
             <b:property name="accntinfo" value="true" />
             <b:property name="properties" >
                <b:map>
                     <b:entry key="prop-1" value="string1"/>
                     <b:entry key="prop-2" value="string2"/>
                </b:map>
             </b:property>
             <b:property name="ccid" value="true" />
             <b:property name="anonymous" value="false" />
             <b:property name="sealAnonymous" value="false" />
             <b:property name="key" value="" /> 
             -->
    </b:bean>

    <!-- The security filter that implements the CORS standard for controling
         cross site resource access by http clients. -->
    <b:bean id="OECORSFilter"
             class="com.progress.rest.security.OECORSFilter" >
             <!-- Examples:
             <b:property name="allowAll" value="false" />
             <b:property name="allowDomains" value="*" />
             <b:property name="allowSubdomains" value="false" />
             <b:property name="allowMethods" value="" />
             <b:property name="messageHeaders" value="" />
             <b:property name="responseHeaders" value="" />
             <b:property name="supportCredentials" value="true" />
             <b:property name="maxAge" value="-1" />
             -->
    </b:bean>

    <b:bean id="OELogoutSuccessHandler" 
            class="com.progress.rest.security.OELogoutSuccessHandler">
    </b:bean>

    <!-- Define the LDAP server you will use for account authentication.
         Refer to standard LDAP URL specification schemes for details.
         You may, or may not, require a 'manager' fully qualified DN of
         a user account that has 'search' permission in the directory tree.
         Consult your Directory Service admin for more information.
    -->
    <ldap-server id="PrimayLDAP"
                 url="ldap://enter_hostname:389/root_dn_here"
                 manager-dn="uid=admin,ou=system"
                 manager-password="admin" />

    <!-- Authentication manager reserved for PUBLIC anonymous authn 
         to the static and dynaic application content.
         The parameters for the <ldap-authentication-provider> element
         is dependent on the design and implementation of the
         Directory Service.  Consult with the administrator for help
         with defining the correct search filters and object attrubutes
         to use.
         WARNING: The ldap authentication provider upper cases all role
         names found for the authenticated user in the directory service.
         This affects setting the role names in the above <intercept-url>
         elements.  Example: ldap name "OEUsers"  Spring role name "ROLE_OEUSERS"
     -->
    <authentication-manager id="RestApplicationtAuth" >
        <ldap-authentication-provider
            server-ref="PrimayLDAP"
            group-role-attribute="cn"
            role-prefix="ROLE_"
            group-search-filter="(member={0})"
            group-search-base=""
            user-search-base=""
            user-search-filter="(uid={0})" />
    </authentication-manager>

    <!-- Authentication manager reserved for REST Manager HTTP Basic 
         authentication to the /adapterman resource. 
         YOU MAY CHANGE THE USER ACCOUNT PASSWORD AND/OR USER ACCOUNT NAME.
         If you change the password you must synchronize it with 'adaptermanSecret'
         context-param defined in REST Management Agent's web.xml. 
         Similarly, if you change user name you must synchronize it with  
         'adaptermanID' context-param defined in REST Management Agent's web.xml. 
         Note: You may use the WEB-INF/EncodePassword.bat or EncodePassword.sh
               to generate new passwords.
    -->

    <!-- REST Manager access -->
    <authentication-manager id="RestManagerAuth" >
        <authentication-provider>
            <password-encoder hash="sha-256" base64="true" >
                <salt-source user-property="username" />
            </password-encoder>
            <user-service>
                <user name="C62384a0F1516B00" 
                      password="UVrkuS+PkvAxurOzB/mZAQujgOlEMjg3UjkVXEdyopw=" 
                      authorities="ROLE_PSCADAPTER" />
            </user-service>
        </authentication-provider>
    </authentication-manager>

</b:beans>
