<!-- Import this file is oeablSecurity-*.xml for enable property placeholder capability -->
<b:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:b="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                        http://www.springframework.org/schema/security
                        http://www.springframework.org/schema/security/spring-security-4.1.xsd">

    <!-- This Spring Security XML configuration file fragment holds bean definitions
         for custom HTTP Authorization header handlers for BASIC and various forms of
         SSO tokens. In this file will an OpenEdge developer edit the configuration 
         for their private Authorization header handler.

         THIS FILE WILL NOT BE OVERWRITEN BY ANY OPENEDGE UPDATE/PATCH PROCESS FOR OEABL
         WEB APPLICATIONS. -->

    <!-- Custom Authorization header filter that allows an OpenEdge customer the
         ability to write a Java or ABL class that permits handling of a customized
         HTTP Authorization header and it value.  The Java/ABL may be written to
         validate a security token or input login credentials according to the
         Authentication-scheme value.
         
         This is a placeholder using an OpenEdge supplied class that is a non operational
         stub.  The ABL developer must configure their class and properties before
         this feature can be used. -->
    <b:bean id="customAuthorizationFilter"
            class="com.progress.appserv.services.security.OECustomAuthFilter" >
        <b:constructor-arg index="0" ref="${http.authmanager}" />

        <!-- Required properties -->

        <!-- Filter policy: {disabled | sufficient | required} 
             [Default: disabled ] -->
        <b:property name="authPolicy" value="${customAuthorizationFilter.authPolicy}" />

        <!-- The Authorization header's authorization scheme name
             This value must be set by the developer - it has no
             default
             [Default: none ] -->
        <b:property name="authScheme" value="${customAuthorizationFilter.authScheme}" /> 

        <!-- Optional base class properties -->

        <!-- Client-type header check using Java reg-ex -->
        <b:property name="authClientType" value="${customAuthorizationFilter.authClientType}" />

        <!-- Name of HTTP header containing credentials/token -->
        <b:property name="authHeader" value="${customAuthorizationFilter.authHeader}" />

        <!-- Error response detail: 0 = safe; 1 = terse; 2 = debug 
             [Default: 0 ] -->
        <b:property name="authErrorDetail" value="${customAuthorizationFilter.authErrorDetail}" />

        <!-- Require HTTPS  to protect Authorization header values
             [Default: true ]-->
        <b:property name="authSecurity" value="${customAuthorizationFilter.authSecurity}" />

        <!-- If authenticating user-id/password - ignore failure 
             and allow continuation to next filter bean
             [Default:  false ] -->
        <b:property name="ignoreFailure" value="${customAuthorizationFilter.ignoreFailure}" />

    </b:bean>
    
    



</b:beans>
